import sys
import os
import struct

BLOCK_SIZE = 512
MAGIC = b'4348PRJ3'
DEGREE = 10
MAX_KEYS = 2 * DEGREE - 1
MAX_CHILDREN = 2 * DEGREE

def int_to_bytes(n):
    return n.to_bytes(8, 'big')

def bytes_to_int(b):
    return int.from_bytes(b, 'big')

def pad_block(data):
    return data + b'\x00' * (BLOCK_SIZE - len(data))


class BTreeNode:
    def __init__(self, block_id=0, parent=0, keys=None, values=None, children=None):
        self.block_id = block_id
        self.parent = parent
        self.keys = keys or []
        self.values = values or []
        self.children = children or [0] * MAX_CHILDREN
        
     def to_bytes(self):
        b = int_to_bytes(self.block_id)
        b += int_to_bytes(self.parent)
        b += int_to_bytes(len(self.keys))

        b += b''.join([int_to_bytes(k) for k in self.keys] + [b'\x00' * 8] * (MAX_KEYS - len(self.keys)))
        b += b''.join([int_to_bytes(v) for v in self.values] + [b'\x00' * 8] * (MAX_KEYS - len(self.values)))
        b += b''.join([int_to_bytes(c) for c in self.children])
        return pad_block(b)

    def from_bytes(data):
        block_id = bytes_to_int(data[0:8])
        parent = bytes_to_int(data[8:16])
        num_keys = bytes_to_int(data[16:24])
        keys = [bytes_to_int(data[24+i*8:32+i*8]) for i in range(MAX_KEYS)]
        values = [bytes_to_int(data[176+i*8:184+i*8]) for i in range(MAX_KEYS)]
        children = [bytes_to_int(data[328+i*8:336+i*8]) for i in range(MAX_CHILDREN)]
        return BTreeNode(block_id, parent, keys[:num_keys], values[:num_keys], children)

    def read_block(file, block_id):
        file.seek(block_id * BLOCK_SIZE)
        return file.read(BLOCK_SIZE)

    def write_block(file, block_id, data):
        file.seek(block_id * BLOCK_SIZE)
        file.write(data)
